{"version":3,"sources":["webpack:///./src/components/bio.tsx","webpack:///./src/templates/blog-post.tsx"],"names":["Bio","data","author","social","site","siteMetadata","className","style","display","fixed","avatar","childImageSharp","alt","name","marginBottom","minWidth","borderRadius","imgStyle","summary","href","twitter","BlogPostTemplate","pageContext","location","post","markdownRemark","siteTitle","title","previous","next","shrink","frontmatter","description","excerpt","date","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel","pageQuery"],"mappings":"gpDAkEeA,MAvDH,KACV,MAAMC,EAAO,QAuBP,OAAEC,EAAF,OAAUC,GAAWF,EAAKG,KAAKC,aACrC,OACE,uBACEC,UAAU,WACVC,MAAO,CACLC,QAAU,SAGZ,gBAAC,IAAD,CACEC,MAAOR,EAAKS,OAAOC,gBAAgBF,MACnCG,IAAKV,EAAOW,KACZN,MAAO,CACLO,aAAc,EACdC,SAAU,GACVC,aAAe,QAEjBC,SAAU,CACRD,aAAe,SAGnB,uCACa,8BAASd,EAAOW,MAD7B,IAC6CX,EAAOgB,QAChD,IACF,qBAAGC,KAAO,uBAAsBhB,EAAOiB,SAAvC,uC,wBCGOC,UAtDU,EAAGpB,OAAMqB,cAAaC,eAC7C,MAAMC,EAAOvB,EAAKwB,eACZC,EAAYzB,EAAKG,KAAKC,aAAasB,OACnC,SAAEC,EAAF,KAAYC,GAASP,EAE3B,OACE,gBAAC,IAAD,CAAQQ,QAAQ,EAAOP,SAAUA,EAAUI,MAAOD,GAEhD,gBAAC,IAAD,CACEC,MAAOH,EAAKO,YAAYJ,MACxBK,YAAaR,EAAKO,YAAYC,aAAeR,EAAKS,UAEpD,2BAAS3B,UAAU,oCACjB,0BAAQA,UAAU,eAChB,sBAAIA,UAAU,gBAAgBkB,EAAKO,YAAYJ,OAC/C,qBAAGrB,UAAU,eAAekB,EAAKO,YAAYG,OAE/C,2BAAS5B,UAAU,UAAU6B,wBAAyB,CAAEC,OAAQZ,EAAKa,QACrE,2BACA,8BACE,gBAAC,EAAD,QAIJ,2BACE,sBACE9B,MAAO,CACLC,QAAU,OACV8B,SAAW,OACXC,eAAiB,gBACjBC,UAAY,OACZC,QAAS,IAGX,0BACGb,GACC,gBAAC,OAAD,CAAMc,GAAId,EAASe,OAAOC,KAAMC,IAAI,QAApC,KACKjB,EAASG,YAAYJ,QAI9B,0BACGE,GACC,gBAAC,OAAD,CAAMa,GAAIb,EAAKc,OAAOC,KAAMC,IAAI,QAC7BhB,EAAKE,YAAYJ,MADpB,WAaP,MAAMmB,EAAY","file":"component---src-templates-blog-post-tsx-27d9f419b2604ee48308.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"gatsby-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          fixed(width: 50, height: 50) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const { author, social } = data.site.siteMetadata\n  return (\n    <div\n      className=\"flex m-3\"\n      style={{\n        display: `flex`,\n      }}\n    >\n      <Image\n        fixed={data.avatar.childImageSharp.fixed}\n        alt={author.name}\n        style={{\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n        }}\n        imgStyle={{\n          borderRadius: `50%`,\n        }}\n      />\n      <p>\n        Written by <strong>{author.name}</strong> {author.summary}\n        {` `}\n        <a href={`https://twitter.com/${social.twitter}`}>\n          You should follow him on Twitter\n        </a>\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../layouts/layout\"\nimport SEO from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const { previous, next } = pageContext\n\n  return (\n    <Layout shrink={false} location={location} title={siteTitle}>\n      {/* <Img className=\"h-screen w-full\" fluid={post.frontmatter.featuredImage.childImageSharp.fluid} /> */}\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article className=\"container-small mx-auto max-w-lg\">\n        <header className=\"text-center\">\n          <h1 className=\"m-6 text-4xl\">{post.frontmatter.title}</h1>\n          <p className=\"m-6 text-xl\">{post.frontmatter.date}</p>\n        </header>\n        <section className=\"content\" dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        featuredImage {\n          childImageSharp {\n            fluid(maxWidth: 1024) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}